Object subclass: #Aether	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper'!!Aether commentStamp: 'JoeJohnston 5/28/2017 07:37' prior: 0!Aether: a class for finding model objects responsibilities: findModel:  using:	a wrapper around allInstances  !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Aether class	instanceVariableNames: ''!!Aether class methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 07:31'!findModel: aClass using: anIdNumber	^ self findModel: aClass using: anIdNumber ifAbsent: [ nil ] ! !!Aether class methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 07:28'!findModel: aClass using: anIdNumber ifAbsent: aBlock	| foundModels |	foundModels := aClass allInstances select: [ :e | e id = anIdNumber ].	^ foundModels isEmpty		ifFalse: [ foundModels first ]		ifTrue: aBlock! !Object subclass: #JSONHelper	instanceVariableNames: 'jsonDictionary'	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper'!!JSONHelper commentStamp: 'JoeJohnston 5/28/2017 08:46' prior: 0!A wrapper around NeoJSONReaderprimarily used to wrap deserializing a date and time from json!!JSONHelper methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 08:37'!valueAt: aSymbol ifAbsent: aBlock	^ jsonDictionary at: aSymbol ifAbsent: aBlock.! !!JSONHelper methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 09:07'!dateAt: aSymbol	^ jsonDictionary		at: aSymbol		ifPresent:			[ :dateString | 			dateString ifEmpty: [ nil ] ifNotEmpty: [ DateAndTime fromString: dateString ]].! !!JSONHelper methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 08:34'!json: aJSONDictionary	jsonDictionary := aJSONDictionary ! !!JSONHelper methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 08:37'!valueAt: aSymbol	^ self valueAt: aSymbol ifAbsent: [ nil ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!JSONHelper class	instanceVariableNames: ''!!JSONHelper class methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 09:01'!fromString: aJSONString	| json |	json := [ NeoJSONReader fromString: aJSONString ]		on: NeoJSONParseError		do: [ Dictionary new ].	^ self new		json: json;		yourself! !Object subclass: #Timekeeper	instanceVariableNames: 'server users projects'	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper'!!Timekeeper commentStamp: 'JoeJohnston 5/28/2017 07:38' prior: 0!Timekeeper 		-the main class of the program.Responsibilities	-starting and stopping the program and its server 	-storing users and projects Collaborators	-the server 	-a list of users	-a list of projects !!Timekeeper methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 18:51'!projects	^projects! !!Timekeeper methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/24/2017 07:19'!server: aZnServer	server := aZnServer! !!Timekeeper methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 18:52'!initialize	users := OrderedCollection new.	projects := OrderedCollection new.! !!Timekeeper methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 18:51'!users	^users ! !!Timekeeper methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/24/2017 20:05'!route: aRoute to: aSymbol	server delegate map: aSymbol to: aRoute! !!Timekeeper methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 21:39'!server	^server! !!Timekeeper methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/24/2017 07:15'!stop	server stop.	server class stopDefault.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Timekeeper class	instanceVariableNames: ''!!Timekeeper class methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 21:40'!newOn: aServer	^ self new server: aServer ! !!Timekeeper class methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 18:40'!routes	^ Dictionary new		at: #storyCard put: StoryCardRoute new;		at: #user put: UserRoute new;		yourself! !!Timekeeper class methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/24/2017 20:13'!start	^ self newOn: self buildServer ! !!Timekeeper class methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/24/2017 20:12'!buildServer	| delegate server |	server := ZnServer startDefaultOn: 8080.	delegate := server delegate.	self routes keysAndValuesDo: [:key :value | 		delegate map: key to: value	].	^ server! !Object subclass: #TimekeeperModel	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper'!!TimekeeperModel commentStamp: 'JoeJohnston 5/28/2017 07:39' prior: 0!TimekeeperModel !!TimekeeperModel methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 23:37'!asString	^super asString , ' id: ', self id asString ! !!TimekeeperModel methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 23:07'!id	^self hash! !TimekeeperModel subclass: #Activity	instanceVariableNames: 'start end storyCard timesheet'	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper'!!Activity commentStamp: 'JoeJohnston 5/28/2017 07:39' prior: 0!Activity !!Activity methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 07:56'!timesheet: aTimesheet	timesheet := aTimesheet ! !!Activity methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/27/2017 18:25'!storyCard	^storyCard 	! !!Activity methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/27/2017 11:18'!start	^start ! !!Activity methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 07:55'!timesheet	^timesheet ! !!Activity methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/27/2017 18:30'!start: aDateAndTime	start := aDateAndTime ! !!Activity methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/27/2017 18:30'!end: aDateAndTime	end := aDateAndTime! !!Activity methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/27/2017 11:18'!end 	^end! !!Activity methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/27/2017 18:30'!storyCard: aStoryCard	storyCard := aStoryCard ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Activity class	instanceVariableNames: ''!!Activity class methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 07:57'!newFor: aStoryCard on: aTimesheet starting: aStartDateAndTime ending: anEndDateAndTime	^ self new		start: aStartDateAndTime;		end: anEndDateAndTime;		storyCard: aStoryCard;		timesheet: aTimesheet;		yourself! !!Activity class methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 08:55'!fromJSON: aString	| storyCard timesheet json newActivity |	json := JSONHelper fromString: aString.	storyCard := Aether		findModel: StoryCard		using: (json valueAt: #storyCardId)		ifAbsent: [ nil ].	timesheet := Aether		findModel: Timesheet		using: (json valueAt: #timesheetId)		ifAbsent: [ nil ].	^storyCard isNil | timesheet isNil		ifTrue: [ nil ]		ifFalse: [ newActivity := self				newFor: storyCard				on: timesheet				starting: (json dateAt: #start)				ending: (json dateAt: #end).			timesheet activities add: newActivity.			storyCard activities add: newActivity.			newActivity ]! !TimekeeperModel subclass: #Project	instanceVariableNames: 'storyCards title'	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper'!!Project commentStamp: 'JoeJohnston 5/28/2017 07:39' prior: 0!Project!!Project methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/24/2017 21:02'!title	^ title! !!Project methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 14:01'!removeStoryCard: aStoryCard	storyCards remove: aStoryCard.! !!Project methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 23:39'!title: aString	title := aString ! !!Project methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 21:03'!storyCards	^storyCards ! !!Project methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 13:00'!addStoryCard: aStoryCard	storyCards add: aStoryCard.! !!Project methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 23:12'!initialize	storyCards := OrderedCollection new.	title := ''.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Project class	instanceVariableNames: 'idCounter'!!Project class methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/24/2017 20:57'!currentId	^ idCounter ifNil: [ idCounter := 0 ] ifNotNil: [ 		idCounter := idCounter + 1.		^idCounter ]! !TimekeeperModel subclass: #StoryCard	instanceVariableNames: 'number title estimate project activities'	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper'!!StoryCard commentStamp: 'JoeJohnston 5/28/2017 07:35' prior: 0!Class: Activity , a block of time devoted to  a story card on someones timesheetResponsibilities : start time and end time. Collaborators: story card, timesheet!!StoryCard methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 20:56'!number	^number! !!StoryCard methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 07:43'!initialize	number := ''.	title := ''.	estimate := 0.	activities := OrderedCollection new.! !!StoryCard methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 12:29'!project	^ project ! !!StoryCard methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 14:17'!assignToProject: aProject	project ifNotNil: [ project storyCards remove: self ].	aProject storyCards add: self.	project := aProject! !!StoryCard methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 07:43'!activities	^activities ! !!StoryCard methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 20:56'!title: aString	title  := aString  ! !!StoryCard methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 20:57'!estimate	^estimate  ! !!StoryCard methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 20:56'!number: aNumber	number := aNumber ! !!StoryCard methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 20:56'!title	^title  ! !!StoryCard methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 20:57'!estimate: aNumber	estimate := aNumber   ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!StoryCard class	instanceVariableNames: 'idCounter'!!StoryCard class methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/24/2017 21:10'!currentId	^ idCounter		ifNil: [ idCounter := 0 ]		ifNotNil: [ idCounter := idCounter + 1.			^ idCounter ]! !!StoryCard class methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 17:58'!isValidJSON: aDictionary	| hasProjectId hasNumber |	hasProjectId := aDictionary  at: #projectId ifPresent: [ true ] ifAbsent: [ false ].	hasNumber := aDictionary  at: #number ifPresent: [ true ] ifAbsent: [ false ].	^ hasProjectId & hasNumber! !!StoryCard class methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 08:46'!fromJSON: aString	| json |	json := NeoJSONReader fromString: aString.	^ (self isValidJSON: json)		ifTrue: [ | card project |			project := Aether findModel: Project using: (json at: #projectId).			card := StoryCard new				estimate: (json at: #estimate ifAbsent: [ nil ]);				title: (json at: #title ifAbsent: [ nil ]);				number: (json at: #number);				yourself.			project storyCards add: card.			card ]		ifFalse: [ nil ]! !TimekeeperModel subclass: #Timesheet	instanceVariableNames: 'user activities'	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper'!!Timesheet commentStamp: 'JoeJohnston 5/28/2017 07:39' prior: 0!Timesheet !!Timesheet methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/27/2017 11:20'!initialize	activities := OrderedCollection new.! !!Timesheet methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/24/2017 22:07'!user: aUser	user := aUser ! !!Timesheet methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/24/2017 22:07'!user	^user! !!Timesheet methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/27/2017 11:20'!activities	^activities ! !TimekeeperModel subclass: #User	instanceVariableNames: 'timesheets name'	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper'!!User commentStamp: 'JoeJohnston 5/28/2017 07:39' prior: 0!User!!User methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 16:29'!userName	^ name! !!User methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/24/2017 22:03'!timesheets	^ timesheets ! !!User methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/24/2017 22:07'!addTimesheet: aTimesheet	timesheets add: aTimesheet.	aTimesheet user: self.! !!User methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 23:12'!initialize	timesheets := OrderedCollection new! !!User methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 16:29'!userName: aString	name := aString! !Object subclass: #MockObject	instanceVariableNames: 'methodCalls'	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Mocks'!!MockObject methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 21:23'!initialize	methodCalls := OrderedCollection new.! !!MockObject methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 21:26'!doesNotUnderstand: aMessage	methodCalls add: aMessage ! !!MockObject methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 21:30'!verify: aBlock	aBlock value: self! !Object subclass: #MockRequest	instanceVariableNames: 'method uri entity'	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Mocks'!!MockRequest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 12:48'!initialize	method := #GET.	uri := ZnUrl fromString: ''! !!MockRequest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 13:00'!entity	^entity! !!MockRequest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 13:06'!contentType	^'application/json'! !!MockRequest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 15:12'!contentLength	^ 345! !!MockRequest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 06:17'!methodToReturn: aSymbol	method := aSymbol ! !!MockRequest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 13:00'!entity: aString	entity := ZnStringEntity text: aString.! !!MockRequest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 06:22'!uri	^ uri! !!MockRequest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 06:50'!uriToReturn: aString	uri := ZnUrl fromString: aString! !!MockRequest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 06:17'!method	^method! !Object subclass: #MockServer	instanceVariableNames: 'stopWasCalled'	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Mocks'!!MockServer methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 21:50'!initialize	stopWasCalled := false! !!MockServer methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 21:47'!stopWasCalled	^stopWasCalled! !!MockServer methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 22:59'!stop	stopWasCalled := true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MockServer class	instanceVariableNames: ''!!MockServer class methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 22:59'!stopDefault! !Object subclass: #Verifier	instanceVariableNames: 'messages'	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Mocks'!!Verifier methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 21:35'!messages: aListOfMessages	messages := aListOfMessages ! !!Verifier methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 21:34'!messages	^messages! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Verifier class	instanceVariableNames: ''!!Verifier class methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 21:33'!newWith: messages	^ self new	! !Object subclass: #JSONModelWriter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-web'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!JSONModelWriter class	instanceVariableNames: ''!!JSONModelWriter class methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/24/2017 21:25'!forStoryCard: aStoryCard	^ NeoJSONWriter		toString:			(Dictionary new				at: #id put: aStoryCard id;				at: #estimate put: aStoryCard estimate;				at: #title put: aStoryCard title;				at: #number put: aStoryCard number;				yourself)! !!JSONModelWriter class methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 16:34'!forUser: aUser	^ NeoJSONWriter		toString:			(Dictionary new				at: #id put: aUser id;				at: #userName put: aUser userName;				yourself)! !Object subclass: #Route	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-web'!!Route methodsFor: 'public' stamp: 'JoeJohnston 5/24/2017 06:25'!value: request	^self handleRequest: request ! !!Route methodsFor: 'public' stamp: 'JoeJohnston 5/25/2017 12:45'!paramsFrom: aZnUrl	| parameters |	parameters := aZnUrl segments reject: [ :e | e = '/' ].	^ parameters isEmpty		ifTrue: [ parameters ]		ifFalse: [ parameters allButFirst ]! !!Route methodsFor: 'public' stamp: 'JoeJohnston 5/24/2017 06:41'!handleRequest: request	^ ZnResponse badRequest: request ! !Route subclass: #AbstractCRUDRoute	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-web'!!AbstractCRUDRoute methodsFor: 'RESTful' stamp: 'JoeJohnston 5/25/2017 06:33'!handleUpdate: request	^ ZnResponse badRequest: request! !!AbstractCRUDRoute methodsFor: 'RESTful' stamp: 'JoeJohnston 5/25/2017 06:33'!handleCreate: request	^ ZnResponse badRequest: request! !!AbstractCRUDRoute methodsFor: 'RESTful' stamp: 'JoeJohnston 5/25/2017 06:33'!handleRead: request	^ ZnResponse badRequest: request! !!AbstractCRUDRoute methodsFor: 'RESTful' stamp: 'JoeJohnston 5/25/2017 06:33'!handleDelete: request	^ ZnResponse badRequest: request! !!AbstractCRUDRoute methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 06:35'!handleRequest: aRequest	aRequest method = #GET		ifTrue: [ ^self handleRead: aRequest ].	aRequest method = #POST		ifTrue: [ ^self handleCreate: aRequest ].	aRequest method = #PUT		ifTrue: [ ^self handleUpdate: aRequest ].	aRequest method = #DELETE		ifTrue: [ ^self handleDelete: aRequest ].	^ ZnResponse notFound: aRequest uri! !!AbstractCRUDRoute methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 16:47'!findIdIn: parameterCollection ifAbsent: anAbsentBlock	^ parameterCollection isEmpty		ifTrue: anAbsentBlock		ifFalse: [ parameterCollection first asNumber ]! !!AbstractCRUDRoute methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 16:48'!findIdIn: parameterCollection	^self findIdIn: parameterCollection ifAbsent: [ nil ].! !AbstractCRUDRoute subclass: #ActivityRoute	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-web'!!ActivityRoute methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 09:20'!handleCreate: request	|newActivity|	newActivity := Activity fromJSON: request entity.	^newActivity ifNil: [ZnResponse badRequest: request ] ifNotNil: [ZnResponse ok: request  ]. 	 ! !AbstractCRUDRoute subclass: #ProjectRoute	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-web'!AbstractCRUDRoute subclass: #StoryCardRoute	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-web'!!StoryCardRoute methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 17:36'!isValidStoryCardJSON: aDictionary	|hasProjectId hasNumber|	hasProjectId := aDictionary at: #projectId ifPresent: [ true ] ifAbsent: [ false ].	hasNumber := aDictionary at: #number ifPresent: [ true ] ifAbsent: [ false ].	^hasProjectId & hasNumber ! !!StoryCardRoute methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 14:03'!handleUpdate: request	| params card |	params := super paramsFrom: request uri.	card := self findCardUsing: params.	^ card isNil		ifTrue: [ ZnResponse notFound: request uri ]		ifFalse: [ | json |			json := NeoJSONReader fromString: request entity.			card				title: (json at: #title ifAbsent: [ card title ]);				number: (json at: #number ifAbsent: [ card number ]);				estimate: (json at: #estimate ifAbsent: [ card estimate ]).			json				at: #projectId				ifPresent: [ :projectId | 					| project |					project := Aether findModel: Project using: projectId .					card assignToProject: project .					].			ZnResponse ok: request ]! !!StoryCardRoute methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 15:15'!findCardUsing: parameterCollection	| idParameter |	idParameter := self findIdIn: parameterCollection.	^ self findCard: idParameter! !!StoryCardRoute methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 12:34'!handleRead: request	| params cardJson card value |	params := super paramsFrom: request uri.	card := self findCardUsing: params.	^ card isNil		ifTrue: [ ZnResponse notFound: request uri ]		ifFalse: [ cardJson := JSONModelWriter forStoryCard: card.			value := ZnEntity with: cardJson type: ZnMimeType applicationJson.			ZnResponse ok: value ]! !!StoryCardRoute methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 18:05'!handleCreate: request	| card |	card := StoryCard fromJSON: request entity.	^ card isNotNil		ifTrue: [ 			ZnResponse ok: request ]		ifFalse: [ ZnResponse badRequest: request ]! !!StoryCardRoute methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 16:57'!findCard: anIdNumber		^Aether findModel: StoryCard using: anIdNumber  ! !AbstractCRUDRoute subclass: #UserRoute	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-web'!!UserRoute methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 17:07'!handleRead: request	| user params id |	params := self paramsFrom: request uri.	id := self findIdIn: params.	user := Aether findModel: User using: id ifAbsent: [ nil ].	^ user		ifNil: [ ZnResponse badRequest: request ]		ifNotNil: [ ZnResponse ok: (ZnEntity with: (JSONModelWriter forUser: user)) ]! !TestCase subclass: #AbstractCRUDRouteTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Tests'!!AbstractCRUDRouteTest commentStamp: '<historical>' prior: 0!An AbstractCRUDRouteTest is a test class for testing the behavior of AbstractCRUDRoute!!AbstractCRUDRouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 18:34'!testHandleRequestReturnsNotFoundWithUnknownMethod	| response route request |	route := AbstractCRUDRoute new.	request := MockRequest new		methodToReturn: 'UNKNOWN';		yourself.	""	response := route handleRequest: request.	""	self assert: response code equals: 404! !!AbstractCRUDRouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 18:23'!testHandleCRUDOptions	| route request |	route := AbstractCRUDRoute new.	request := MockRequest new.	""	self assert: (route handleCreate: request) code equals: 400.	self assert: (route handleRead: request) code equals: 400.	self assert: (route handleUpdate: request) code equals: 400.	self assert: (route handleDelete: request) code equals: 400! !!AbstractCRUDRouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 18:32'!testHandleRequest	| route |	route := AbstractCRUDRoute new.	""	#(#GET #POST #PUT #DELETE)		do: [ :method | 			| request |			request := MockRequest new				methodToReturn: method;				yourself.			self assert: (route handleRequest: request) code equals: 400 ]	! !AbstractCRUDRouteTest subclass: #ActivityRouteTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Tests'!!ActivityRouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 09:21'!testHandleCreate_FailsWithNoTimesheetId	| response card timesheet route jsonString request |	route := ActivityRoute new.	card := StoryCard new.	timesheet := Timesheet new.	jsonString := '{"start":"2017/5/18 08:30","end":"2017/5/19 10:15","storyCardId":'		, card id asString , '}'.	request := MockRequest new		entity: jsonString;		yourself.	response := route handleCreate: request.	""	self assert: response code equals: 400.	self assert: card activities isEmpty .	self assert: timesheet activities isEmpty .! !!ActivityRouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 09:17'!testHandleCreate	| response card timesheet route jsonString request |	route := ActivityRoute new.	card := StoryCard new.	timesheet := Timesheet new.	jsonString := '{"start":"2017/5/18 08:30","end":"2017/5/19 10:15","storyCardId":' , card id asString		, ',"timesheetId":' , timesheet id asString , '}'.	request := MockRequest new		entity: jsonString;		yourself.	response := route handleCreate: request.	""	self assert: response code equals: 200.	self assert: card activities size equals: 1.	self assert: timesheet activities size equals: 1.	self assert: card activities first equals: timesheet activities first! !TestCase subclass: #AetherTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Tests'!!AetherTest commentStamp: '<historical>' prior: 0!An AetherTest is a test class for testing the behavior of Aether!!AetherTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 07:33'!testFindModelUsingIfAbsent	| storyCardWasAbsent timesheetWasAbsent projectWasAbsent userWasAbsent |	storyCardWasAbsent := false.	timesheetWasAbsent := false.	projectWasAbsent := false.	userWasAbsent := false.	""	Aether findModel: StoryCard using: 999 ifAbsent: [ storyCardWasAbsent := true ].	Aether findModel: Timesheet using: 999 ifAbsent: [ timesheetWasAbsent := true ].	Aether findModel: User using: 999 ifAbsent: [ userWasAbsent := true ].	Aether findModel: Project using: 999 ifAbsent: [ projectWasAbsent := true ].	""	self assert: storyCardWasAbsent.	self assert: timesheetWasAbsent.	self assert: projectWasAbsent.	self assert: userWasAbsent! !!AetherTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 07:31'!testFindModelUsing	| storyCard project user timesheet |	storyCard := StoryCard new.	project := Project new.	user := User new.	timesheet := Timesheet new.	""	self assert: (Aether findModel: StoryCard using: storyCard id) equals: storyCard.	self assert: (Aether findModel: Timesheet using: timesheet id) equals: timesheet.	self assert: (Aether findModel: Project using: project id) equals: project.	self assert: (Aether findModel: User using: user id) equals: user.	""	self assert: (Aether findModel: StoryCard using: 999) isNil.	self assert: (Aether findModel: Timesheet using: 999) isNil.	self assert: (Aether findModel: Project using: 999) isNil.	self assert: (Aether findModel: User using: 999) isNil.! !TestCase subclass: #JSONModelWriterTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Tests'!!JSONModelWriterTest commentStamp: '<historical>' prior: 0!A JSONModelWriterTest is a test class for testing the behavior of JSONModelWriter!!JSONModelWriterTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/24/2017 21:29'!testforStoryCard	| json card |	card := StoryCard new		estimate: 4;		title: 'foo';		number: '003';		yourself.	""	json := JSONModelWriter forStoryCard: card.	""	self assert: json equals: '{"estimate":4,"title":"foo","id":' , card id asString, ',"number":"003"}'! !!JSONModelWriterTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 16:43'!testforUser	| json user |	user := User new		userName: 'bob';		yourself.	""	json := JSONModelWriter forUser: user.	""	self		assert: json		equals: '{"userName":"bob","id":', user id asString , '}'! !TestCase subclass: #RouteTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Tests'!!RouteTest commentStamp: '<historical>' prior: 0!A RouteTest is a test class for testing the behavior of Route!!RouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 12:44'!testParamsFrom	| params route |	route := Route new.	params := route paramsFrom: (ZnUrl fromString: 'base/2').	""	self assert: params first equals: '2'.	""	params := route paramsFrom: (ZnUrl fromString: 'base/2/child/3').	""	self assert: params first equals: '2'.	self assert: params second equals: 'child'.	self assert: params third equals: '3'.	""	params := route paramsFrom: (ZnUrl fromString: 'base/').	""	self assert: params isEmpty ! !!RouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 12:48'!testHandleRequest	| response route |	route := Route new.	response := route handleRequest: MockRequest new.	self assert: response code equals: 400! !AbstractCRUDRouteTest subclass: #StoryCardRouteTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Tests'!!StoryCardRouteTest commentStamp: '<historical>' prior: 0!A StoryCardRouteTest is a test class for testing the behavior of StoryCardRoute!!StoryCardRouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 12:45'!testHandelUpdate	| route card project request response |	route := StoryCardRoute new.	card := StoryCard new		estimate: 0;		title: 'foo';		number: '999';		yourself.	Project new addStoryCard: card.	project := Project new		title: 'expected';		yourself.	request := MockRequest new		uriToReturn: 'storyCard/' , card id asString;		entity:			'{"estimate":4,"title":"Start Something","number":"001","projectId":'				, project id asString , ',"id":' , card id asString , '}';		yourself.	response := route handleUpdate: request.	""	self assert: response code equals: 200.	self assert: card estimate equals: 4.	self assert: card title equals: 'Start Something'.	self assert: card number equals: '001'.	self assert: (project storyCards includes: card)! !!StoryCardRouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 12:35'!testHandelRead	| expectedResponseValue response route request card |	card := StoryCard new.	route := StoryCardRoute new.	request := MockRequest new.	request uriToReturn: 'storycard/' , card id asString.	""	response := route handleRead: request.	""	expectedResponseValue := JSONModelWriter forStoryCard: card.	self assert: response entity string equals: expectedResponseValue.	self assert: response code equals: 200.	""	request uriToReturn: 'storycard/09999'.	""	response := route handleRead: request.	""	self assert: response code equals: 404.	""	request uriToReturn: 'storycard/'.	""	response := route handleRead: request.	""	self assert: response code equals: 404.! !!StoryCardRouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 17:40'!testHandelCreateHandlesInvalidJSON	| project route request response cardJSONWithoutNumber cardJSONWithoutProjectId |	project := Project new.	request := MockRequest new.	cardJSONWithoutNumber := '{"estimate":4,"title":"Start Something","projectId":'		, project id asString , '}'.	cardJSONWithoutProjectId := '{"estimate":4,"title":"Start Something","number":"001"}'.	route := StoryCardRoute new.	""	request entity: cardJSONWithoutNumber.	""	response := route handleCreate: request.	""	self assert: response code equals: 400.	self assert: project storyCards isEmpty.	""	request entity: cardJSONWithoutProjectId .	""	response := route handleCreate: request.	""	self assert: response code equals: 400.	self assert: project storyCards isEmpty! !!StoryCardRouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 08:47'!testHandelCreateHandlesValidJSONWithMissingValues	| project route request response cardJSONWithoutTitle cardJSONWithoutEstimate card |	project := Project new.	request := MockRequest new.	cardJSONWithoutEstimate := '{"title":"Start Something","number":"001","projectId":'		, project id asString , '}'.	cardJSONWithoutTitle := '{"estimate":4,"number":"001","projectId":' , project id asString , '}'.	route := StoryCardRoute new.	""	request entity: cardJSONWithoutEstimate.	""	response := route handleCreate: request.	self assert: response code equals: 200.	self assert: project storyCards size equals: 1.	card := project storyCards first.	self assert: card estimate isNil.	self assert: card title equals: 'Start Something'.	self assert: card number equals: '001'.	""	request entity: cardJSONWithoutTitle.	""	response := route handleCreate: request.	self assert: response code equals: 200.	self assert: project storyCards size equals: 2.	card := project storyCards second.	self assert: card estimate equals: 4.	self assert: card title isNil.	self assert: card number equals: '001'.! !!StoryCardRouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 21:02'!testHandelCreateHandlesInvalidProjectId	| route request response cardJSONWithoutNumber |	request := MockRequest new.	cardJSONWithoutNumber := '{"estimate":4,"title":"Start Something","projectId":999999}'.	route := StoryCardRoute new.	""	request entity: cardJSONWithoutNumber.	""	response := route handleCreate: request.	""	self assert: response code equals: 400.! !!StoryCardRouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 12:46'!testHandelUpdateWithNilValues	| route card project request response |	route := StoryCardRoute new.	card := StoryCard new		estimate: 32;		title: 'foo';		number: '999';		yourself.	Project new addStoryCard: card.	project := Project new		title: 'expected';		yourself.	request := MockRequest new		uriToReturn: 'storyCard/' , card id asString;		entity: '{"number":"001","projectId":' , project id asString , '}';		yourself.	response := route handleUpdate: request.	""	self assert: response code equals: 200.	self assert: card estimate equals: 32.	self assert: card title equals: 'foo'.	self assert: card number equals: '001'.	self assert: (project storyCards includes: card)! !!StoryCardRouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 08:51'!testHandelUpdateWithNilProjectId	| route card request response originalProject |	route := StoryCardRoute new.	originalProject := Project new.	card := StoryCard new		estimate: 32;		title: 'foo';		number: '999';		yourself.	originalProject storyCards add: card.	request := MockRequest new		uriToReturn: 'storyCard/' , card id asString;		entity: '{"title":"bar"}';		yourself.	response := route handleUpdate: request.	""	self assert: response code equals: 200.	self assert: card estimate equals: 32.	self assert: card title equals: 'bar'.	self assert: card number equals: '999'.	self assert: (originalProject storyCards includes: card)! !!StoryCardRouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 14:04'!testHandelUpdateMovesCardFromOneProjectToAnother	| route card request response originalProject newProject |	route := StoryCardRoute new.	originalProject := Project new.	newProject := Project new.	card := StoryCard new		estimate: 32;		title: 'foo';		number: '999';		yourself.	card assignToProject: originalProject.	request := MockRequest new		uriToReturn: 'storyCard/' , card id asString;		entity: '{"projectId":' , newProject id asString , '}';		yourself.	response := route handleUpdate: request.	""	self deny: (originalProject storyCards includes: card).	self assert: (newProject storyCards includes: card)! !!StoryCardRouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 08:46'!testHandelCreate	| project route request response card |	project := Project new.	request := MockRequest new.	request		entity:			'{"estimate":4,"title":"Start Something","number":"001","projectId":' , project id asString , '}'.	route := StoryCardRoute new.	""	response := route handleCreate: request.	""	self assert: project storyCards size equals: 1.	card := project storyCards first.	self assert: card estimate equals: 4.	self assert: card title equals: 'Start Something'.	self assert: card number equals: '001'.! !TestCase subclass: #TimekeeperModelTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Tests'!!TimekeeperModelTest commentStamp: '<historical>' prior: 0!A TimekeeperModelTest is a test class for testing the behavior of TimekeeperModel!!TimekeeperModelTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/25/2017 23:07'!testId	|model|	model := TimekeeperModel new.	self assert: model id equals: model hash. ! !TimekeeperModelTest subclass: #ActivityTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Tests'!!ActivityTest commentStamp: '<historical>' prior: 0!An ActivityTest is a test class for testing the behavior of Activity!!ActivityTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 08:27'!testFromJSONWithNilEnd	| jsonString activity card sheet |	card := StoryCard new.	sheet := Timesheet new.	jsonString := '{"start":"2017/5/17 08:30","storyCardId":' , card id asString		, ',"timesheetId":' , sheet id asString , '}'.	""	activity := Activity fromJSON: jsonString.	""	self assert: activity storyCard equals: card.	self assert: activity timesheet equals: sheet.	self		assertDate: activity start		hasYear: 2017		month: 5		day: 17		hour: 8		andMinutes: 30.	self assert: activity end isNil! !!ActivityTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 08:19'!assertDate: aDateAndTime hasYear: aYear month: aMonth day: aDay hour: anHour andMinutes: aMinute	self assert: aDateAndTime  year equals: aYear .	self assert: aDateAndTime  month equals: aMonth .	self assert: aDateAndTime  dayOfMonth equals: aDay .	self assert: aDateAndTime  hour equals: anHour .	self assert: aDateAndTime  minute equals: aMinute .! !!ActivityTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 08:28'!testFromJSONWithEmptyEnd	| jsonString activity card sheet |	card := StoryCard new.	sheet := Timesheet new.	jsonString := '{"start":"2017/5/17 08:30","end":"","storyCardId":' , card id asString		, ',"timesheetId":' , sheet id asString , '}'.	""	activity := Activity fromJSON: jsonString.	""	self assert: activity storyCard equals: card.	self assert: activity timesheet equals: sheet.	self		assertDate: activity start		hasYear: 2017		month: 5		day: 17		hour: 8		andMinutes: 30.	self assert: activity end isNil! !!ActivityTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 08:55'!testFromInvalidJSONWithNilStorycard	| jsonString activity sheet |	sheet := Timesheet new.	jsonString := '{"start":"2017/5/17 08:30","end":"2017/5/18 10:45","timesheetId":',		sheet id asString,'}'.	""	activity := Activity fromJSON: jsonString.	""	self assert: activity isNil.	self assert: sheet activities isEmpty.! !!ActivityTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 09:11'!testFromInvalidJSONWithNilTimesheet	| jsonString activity card|	card := StoryCard new.	jsonString := '{"start":"2017/5/17 08:30","end":"2017/5/18 10:45","storyCardId":'		, card id asString , '}'.	""	activity := Activity fromJSON: jsonString.	""	self assert: activity isNil.	self assert: card activities isEmpty! !!ActivityTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 09:02'!testFromJSONWithParseError	| jsonString activity card sheet |	card := StoryCard new.	sheet := Timesheet new.	jsonString := '{"start":"2017/5/17 08:30","end":2017/5/17 13:15","storyCardId:'		, card id asString , ',"timesheetId":' , sheet id asString , '}'.	""	activity := Activity fromJSON: jsonString.	""	self assert: activity isNil.	self deny: (card activities includes: activity).	self deny: (sheet activities includes: activity)! !!ActivityTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/27/2017 18:25'!testInitialize	| activity |	activity := Activity new.	""	self assert: activity start isNil.	self assert: activity end isNil.	self assert: activity storyCard isNil.! !!ActivityTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 07:58'!testNewForAStoryCardStartingEnding	| activity card start end sheet|	sheet := Timesheet new.	start := DateAndTime now.	end := DateAndTime now.	card := StoryCard new.	activity := Activity newFor: card on: sheet starting: start ending: end.	""	self assert: activity start equals: start.	self assert: activity end equals: end.	self assert: activity storyCard equals: card.	self assert: activity timesheet equals: sheet ! !!ActivityTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 08:50'!testFromJSON	| jsonString activity card sheet |	card := StoryCard new.	sheet := Timesheet new.	jsonString := '{"start":"2017/5/17 08:30","end":"2017/5/17 13:15","storyCardId":'		, card id asString , ',"timesheetId":' , sheet id asString , '}'.	""	activity := Activity fromJSON: jsonString.	""	self assert: activity storyCard equals: card.	self assert: activity timesheet equals: sheet.	self assert: (card activities includes: activity).	self assert: (sheet activities includes: activity).	self		assertDate: activity start		hasYear: 2017		month: 5		day: 17		hour: 8		andMinutes: 30.	self		assertDate: activity end		hasYear: 2017		month: 5		day: 17		hour: 13		andMinutes: 15! !TimekeeperModelTest subclass: #ProjectTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Tests'!!ProjectTest commentStamp: '<historical>' prior: 0!A ProjectTest is a test class for testing the behavior of Project!!ProjectTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/24/2017 21:36'!testInitialize	| project |	project := Project new.	self assert: project storyCards isEmpty.	self assert: project title equals: ''.	self assert: project id equals: project hash! !!ProjectTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 14:15'!testAddStoryCard	| project card |	project := Project new.	card := StoryCard new.	""	project addStoryCard: card.	""	self assert: project storyCards size equals: 1.	self assert: (project storyCards includes: card).! !!ProjectTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 12:36'!testRemoveStoryCard	| project card |	project := Project new.	card := StoryCard new.	project addStoryCard: card.	""	project removeStoryCard: card.	""	self assert: project storyCards isEmpty.	self assert: card project isNil.! !TimekeeperModelTest subclass: #StoryCardTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Tests'!!StoryCardTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/28/2017 07:43'!testInitialize	| card |	card := StoryCard new.	self assert: card activities isEmpty .	self assert: card number equals: ''.	self assert: card estimate equals: 0.	self assert: card title equals: ''.	self assert: card id equals: card hash! !!StoryCardTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 12:59'!testAssignToProject	| project card |	project := Project new.	card := StoryCard new.	""	card assignToProject: project.	""	self assert: card project equals: project.	self assert: (project storyCards includes: card) ! !!StoryCardTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 14:00'!testAssignToProjectFromAnotherProject	| oldProject project card |	oldProject := Project new.	project := Project new.	card := StoryCard new.	card assignToProject: oldProject.	""	card assignToProject: project.	""	self assert: oldProject storyCards isEmpty .	self assert: card project equals: project.	self assert: (project storyCards includes: card)! !TestCase subclass: #TimekeeperTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Tests'!!TimekeeperTest commentStamp: '<historical>' prior: 0!A TimekeeperTest is a test class for testing the behavior of Timekeeper!!TimekeeperTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 21:49'!testStop	| keeper server |	server := MockServer new.	keeper := Timekeeper newOn: server.	self deny: server stopWasCalled .	""	keeper stop.	""	self assert: server stopWasCalled! !!TimekeeperTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 18:51'!testInitialize	| keeper |	keeper := Timekeeper new.	self assert: keeper users isEmpty.	self assert: keeper projects isEmpty.! !!TimekeeperTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/23/2017 21:46'!testNewOnAServer	| keeper server |	server := MockServer new.	keeper := Timekeeper newOn: server.	""	self assert: keeper server equals: server! !TimekeeperModelTest subclass: #TimesheetTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Tests'!!TimesheetTest commentStamp: '<historical>' prior: 0!A TimesheetTest is a test class for testing the behavior of Timesheet!!TimesheetTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/27/2017 11:19'!testInitialize	| timesheet |	timesheet := Timesheet new.	self assert: timesheet activities isEmpty .! !AbstractCRUDRouteTest subclass: #UserRouteTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Tests'!!UserRouteTest commentStamp: '<historical>' prior: 0!An UserRouteTest is a test class for testing the behavior of UserRoute!!UserRouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 16:44'!testHandleRead	| route request user response |	user := User new		userName: 'bob';		yourself.	route := UserRoute new.	request := MockRequest new.	request uriToReturn: 'user/' , user id asString.	""	response := route handleRead: request.	""	self assert: response code equals: 200.	self assert: response entity string equals: '{"userName":"bob","id":', user id asString ,'}'.! !!UserRouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 17:03'!testHandleReadWithInvalidId	| route request response |	route := UserRoute new.	request := MockRequest new.	request uriToReturn: 'user/999'.	""	response := route handleRead: request.	""	self assert: response code equals: 400.! !!UserRouteTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/26/2017 17:07'!testHandleReadWithNoId	| route request response |	route := UserRoute new.	request := MockRequest new.	request uriToReturn: 'user/'.	""	response := route handleRead: request.	""	self assert: response code equals: 400! !TimekeeperModelTest subclass: #UserTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'paratus-timekeeper-Tests'!!UserTest commentStamp: '<historical>' prior: 0!An UserTest is a test class for testing the behavior of User!!UserTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/24/2017 22:03'!testInitialize	| user |	user := User new.	""	self assert: user id equals: user hash.	self assert: user timesheets isEmpty! !!UserTest methodsFor: 'as yet unclassified' stamp: 'JoeJohnston 5/24/2017 22:05'!testAddTimesheet	| user sheet |	user := User new.	sheet := Timesheet new.	""	user addTimesheet: sheet.	""	self assert: user timesheets size equals: 1.	self assert: (user timesheets includes: sheet).	self assert: user equals: sheet user! !